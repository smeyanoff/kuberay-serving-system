apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: credit-scoring-system
spec:
  serviceUnhealthySecondThreshold: 60 
  deploymentUnhealthySecondThreshold: 60
  serveConfigV2: |

    applications:

    - name: app1

      route_prefix: /model-A

      import_path: src.models.model_a.pipeline:app

      runtime_env:
        "working_dir": "https://github.com/smeyanoff/kuberay-seving-system/archive/07ac19c.zip"
        "pip": ["python-dotenv"]

      deployments:

      - name: DataPrepare
        ray_actor_options:
          num_cpus: 0.1
        num_replicas:
          1

      - name: ModelA
        ray_actor_options:
          num_cpus: 0.1
        num_replicas:
          1

      - name: DAGDriver
        ray_actor_options:
          num_cpus: 0.2
        num_replicas:
          1

    - name: app2

      route_prefix: /model-B

      import_path: src.models.model_b.pipeline:app

      runtime_env:
        "working_dir": "https://github.com/smeyanoff/kuberay-seving-system/archive/07ac19c.zip"
        "pip": ["python-dotenv"]

      deployments:

      - name: ModelB
        ray_actor_options:
          num_cpus: 0.1
        num_replicas:
          1

      - name: DAGDriver
        ray_actor_options:
          num_cpus: 0.2
        num_replicas:
          1

    - name: app3

      route_prefix: /model-C

      import_path: src.models.model_c.pipeline:app

      runtime_env:
        "working_dir": "https://github.com/smeyanoff/kuberay-seving-system/archive/07ac19c.zip"
        "pip": ["python-dotenv"]

      deployments:

      - name: ModelC
        ray_actor_options:
          num_cpus: 0.1
        num_replicas:
          1

      - name: DAGDriver
        ray_actor_options:
          num_cpus: 0.2
        num_replicas:
          1

  rayClusterConfig:
    rayVersion: '2.6.3' # should match the Ray version in the image of the containers
    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      serviceType: ClusterIP # optional
      # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
      rayStartParams:
        port: '6379' # should match container port named gcs-server
        dashboard-host: '0.0.0.0'
        num-cpus: '1' # can be auto-completed from the limits
        block: 'true'
      #pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: rayproject/ray:2.6.3
              resources:
                limits:
                  cpu: 2
                  memory: 2Gi
                requests:
                  cpu: 2
                  memory: 2Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 1
        minReplicas: 1
        maxReplicas: 3
        # logical group name, for this called small-group, also can be functional
        groupName: small-group
        rayStartParams:
          block: 'true'
        #pod template
        template:
          spec:
            initContainers:
              # the env var $FQ_RAY_IP is set by the operator if missing, with the value of the head service name
              - name: init
                image: busybox:1.28
                command: ['sh', '-c', "until nslookup $RAY_IP.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for K8s Service $RAY_IP; sleep 2; done"]
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray:2.6.3
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh","-c","ray stop"]
                resources:
                  limits:
                    cpu: "256m"
                    memory: "256Mi"
                  requests:
                    cpu: "256m"
                    memory: "256Mi"
    headServiceAnnotations: {}